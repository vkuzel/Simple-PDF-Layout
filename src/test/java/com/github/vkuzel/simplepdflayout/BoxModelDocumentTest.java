package com.github.vkuzel.simplepdflayout;

import com.github.vkuzel.simplepdflayout.geometry.Point;
import com.github.vkuzel.simplepdflayout.property.Border;
import com.github.vkuzel.simplepdflayout.property.Line;
import com.github.vkuzel.simplepdflayout.property.Margin;
import com.github.vkuzel.simplepdflayout.property.Padding;
import org.junit.Ignore;
import org.junit.Test;

import java.awt.*;

import static com.github.vkuzel.simplepdflayout.Text.Alignment.CENTER;

public class BoxModelDocumentTest {

    private static final Line LINE = new Line().setWidth(1).setColor(Color.BLACK);
    private static final Line BORDER_TOP_BOTTOM = new Line().setWidth(25).setColor(Color.CYAN);
    private static final Line BORDER_LEFT_RIGHT = new Line().setWidth(50).setColor(Color.CYAN);

    @Ignore
    @Test
    public void generateBoxModelDocumentTest() {
        Page page = Page.a4()
                .addChild(Box::new, box -> box
                        .setTopLeft(97, 100)
                        .setDimension(400, 200)
                        .setMargin(new Margin(25, 50, 25, 50))
                        .setBorder(new Border(BORDER_TOP_BOTTOM, BORDER_LEFT_RIGHT, BORDER_TOP_BOTTOM, BORDER_LEFT_RIGHT))
                        .setPadding(new Padding(25, 50, 25, 50))
                        .addChild(Box::new, box1 -> box1
                                .setBackgroundColor(Color.PINK))
                )
                .addChild(Box::new, this::createTopLeftPointer)
                .addChild(Box::new, this::createAxes)
                .addChild(Box::new, box1 -> createHorizontalDimension(box1, new Point(247, 300), new Point(347, 350), "content width"))
                .addChild(Box::new, box1 -> createHorizontalDimension(box1, new Point(97, 300), new Point(147, 350), "margin"))
                .addChild(Box::new, box1 -> createHorizontalDimension(box1, new Point(147, 300), new Point(197, 350), "border"))
                .addChild(Box::new, box1 -> createHorizontalDimension(box1, new Point(197, 300), new Point(247, 350), "padding"))
                .addChild(Box::new, box1 -> createHorizontalDimension(box1, new Point(197, 300), new Point(397, 390), "background width"))
                .addChild(Box::new, box1 -> createHorizontalDimension(box1, new Point(97, 300), new Point(497, 430), "width"))
                .addChild(Text::new, text -> text
                        .setTopLeftPercent(0, 90)
                        .setText("Generated by " + this.getClass().getSimpleName())
                        .setAlignment(CENTER));

        Document.renderPageToFile(page, "document-box-model.pdf");
    }

    private void createTopLeftPointer(Box box) {
        Point topLeft = new Point(97, 100);

        box
                .addChild(Text::new, text -> text
                        .setTopLeft(60, 50)
                        .setText("top-left"))
                .addChild(Arrow::new, arrow -> arrow
                        .setStartPoint(topLeft)
                        .setEndPosition(80, 70)
                        .setLine(LINE));
    }

    private void createAxes(Box box) {
        Point topLeft = new Point(20, 20);
        Point topRight = new Point(60, topLeft.getX());
        Point bottomLeft = new Point(topLeft.getX(), 60);

        box
                .addChild(Arrow::new, arrow -> arrow
                        .setStartPoint(topRight)
                        .setEndPoint(topLeft)
                        .setLine(LINE))
                .addChild(Arrow::new, arrow -> arrow
                        .setStartPoint(bottomLeft)
                        .setEndPoint(topLeft)
                        .setLine(LINE))
                .addChild(Text::new, text -> text
                        .setTopLeft(topRight.getX() + 3, topRight.getY() - 8)
                        .setText("x"))
                .addChild(Text::new, text -> text
                        .setTopLeft(bottomLeft.getX() - 3, bottomLeft.getY())
                        .setText("y"));
    }

    private void createHorizontalDimension(Box box, Point topLeft, Point bottomRight, String text) {
        Point topRight = new Point(bottomRight.getX(), topLeft.getY());
        Point bottomLeft = new Point(topLeft.getX(), bottomRight.getY());

        box
                .addChild(Arrow::new, arrow -> arrow
                        .setStartPoint(bottomLeft)
                        .setEndPoint(bottomRight)
                        .setEndArrow(true)
                        .setLine(LINE))
                .addChild(Arrow::new, arrow -> arrow
                        .setStartPoint(topLeft)
                        .setEndPoint(bottomLeft)
                        .setStartArrow(false)
                        .setLine(LINE))
                .addChild(Arrow::new, arrow -> arrow
                        .setStartPoint(topRight)
                        .setEndPoint(bottomRight)
                        .setStartArrow(false)
                        .setLine(LINE))
                .addChild(Text::new, text1 -> text1
                        .setTopLeft(bottomLeft.getX(), bottomLeft.getY() - 18)
                        .setWidth(bottomRight.getX() - bottomLeft.getX())
                        .setText(text)
                        .setAlignment(CENTER));
    }
}
