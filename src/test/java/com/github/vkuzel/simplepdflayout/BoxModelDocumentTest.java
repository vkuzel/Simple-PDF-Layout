package com.github.vkuzel.simplepdflayout;

import com.github.vkuzel.simplepdflayout.geometry.Point;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.junit.Ignore;
import org.junit.Test;

import java.awt.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class BoxModelDocumentTest {

    private static final Line LINE = new Line().setWidth(1).setColor(Color.BLACK);

    @Ignore
    @Test
    public void generateBoxModelDocumentTest() throws IOException {
        try (PDDocument document = new PDDocument()) {
            PDPage page = new PDPage(PDRectangle.A4);
            document.addPage(page);

            try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
                Line borderTopBottom = new Line().setWidth(25).setColor(Color.CYAN);
                Line borderLeftRight = new Line().setWidth(50).setColor(Color.CYAN);
                new Page<>()
                        .addChildren(createAxes())
                        .addChild(new Box()
                                .setTopLeft(97, 100)
                                .setDimension(400, 200)
                                .setMarginTop(25).setMarginRight(50).setMarginLeft(50)
                                .setBorderTop(borderTopBottom).setBorderRight(borderLeftRight).setBorderBottom(borderTopBottom).setBorderLeft(borderLeftRight)
                                .setPaddingTop(25).setPaddingRight(50).setPaddingBottom(25).setPaddingLeft(50)
                                .addChild(new Box().setBackgroundColor(Color.PINK)))
                        .addChildren(createTopLeftPointer())
                        .addChildren(createHorizontalDimension(new Point(247, 300), new Point(347, 350), "content width"))
                        .addChildren(createHorizontalDimension(new Point(97, 300), new Point(147, 350), "margin"))
                        .addChildren(createHorizontalDimension(new Point(147, 300), new Point(197, 350), "border"))
                        .addChildren(createHorizontalDimension(new Point(197, 300), new Point(247, 350), "padding"))
                        .addChildren(createHorizontalDimension(new Point(97, 300), new Point(497, 390), "width"))
                        .addChild(new Text<>().setTopLeftPercent(0, 90).setText("Generated by " + this.getClass().getSimpleName()).setAlignment(Text.Alignment.CENTER))
                        .draw(document, contentStream);
            }

            document.save("document-box-model.pdf");
        }
    }

    private List<ChildElement> createTopLeftPointer() {
        Point topLeft = new Point(97, 100);

        List<ChildElement> elements = new ArrayList<>(4);
        elements.add(new Text<>().setTopLeft(60, 50).setText("top-left"));
        elements.add(new Arrow().setStartPoint(topLeft).setEndPosition(80, 70).setLine(LINE));
        return elements;
    }

    private List<ChildElement> createAxes() {
        Point topLeft = new Point(20, 20);
        Point topRight = new Point(60, topLeft.getX());
        Point bottomLeft = new Point(topLeft.getX(), 60);

        List<ChildElement> elements = new ArrayList<>(4);
        elements.add(new Arrow().setStartPoint(topRight).setEndPoint(topLeft).setLine(LINE));
        elements.add(new Arrow().setStartPoint(bottomLeft).setEndPoint(topLeft).setLine(LINE));
        elements.add(new Text<>().setTopLeft(topRight.getX() + 3, topRight.getY() - 8).setText("x"));
        elements.add(new Text<>().setTopLeft(bottomLeft.getX() - 3, bottomLeft.getY()).setText("y"));
        return elements;
    }

    private List<ChildElement> createHorizontalDimension(Point topLeft, Point bottomRight, String text) {
        Point topRight = new Point(bottomRight.getX(), topLeft.getY());
        Point bottomLeft = new Point(topLeft.getX(), bottomRight.getY());

        List<ChildElement> elements = new ArrayList<>(4);
        elements.add(new Arrow().setStartPoint(bottomLeft).setEndPoint(bottomRight).setEndArrow(true).setLine(LINE));
        elements.add(new Arrow().setStartPoint(topLeft).setEndPoint(bottomLeft).setStartArrow(false).setLine(LINE));
        elements.add(new Arrow().setStartPoint(topRight).setEndPoint(bottomRight).setStartArrow(false).setLine(LINE));
        elements.add(new Text<>().setTopLeft(bottomLeft.getX(), bottomLeft.getY() - 18).setWidth(bottomRight.getX() - bottomLeft.getX()).setText(text).setAlignment(Text.Alignment.CENTER));
        return elements;
    }
}
